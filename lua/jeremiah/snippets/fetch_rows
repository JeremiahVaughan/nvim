rows, err := _DATABASE_CONNECTION_POOL_.Query(
    "SELECT st.id, st.some_column \nFROM some_table st\nJOIN some_other_table sot ON st.id = sot.id\nWHERE sot.some_column = $1",
    someArg,
)

defer func(rows *sql.Rows) {
    if rows != nil {
        closeRowsError := rows.Close()
        if closeRowsError != nil {
            // no choice but to log the error since defer doesn't let us return errors
            // defer is needed though because it ensures a cleanup attempt is made even if we should return early due to an error
            log.Printf("error, when attempting to close database rows: %v", closeRowsError)
        }
    }
}(rows)

if err != nil {
    return nil, fmt.Errorf("error, when attempting to retrieve records. Error: %v", err)
}

var result []_RESULT_STRUCT_
for rows.Next() {
    var r _RESULT_STRUCT_
    err = rows.Scan(
        &r.Id,
        &r._SOME_PROPERTY_,
    )
    if err != nil {
        return nil, fmt.Errorf("error, when scanning database rows: %v", err)
    }
    result = append(result, r)
}

err = rows.Err()
if err != nil {
    return nil, fmt.Errorf("error, when iterating through database rows: %v", err)
}
return result, nil
